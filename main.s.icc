# mark_description "Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.3.199 Build 20190206";
# mark_description "-S -std=c99 -qopenmp -march=skylake-avx512 -Os";
	.file "main.c"
	.text
..TXTST0:
.L_2__routine_start_main_0:
# -- Begin  main
	.text
# mark_begin;

	.globl main
# --- main()
main:
..B1.1:                         # Preds ..B1.0
                                # Execution count [0.00e+00]
	.cfi_startproc
..___tag_value_main.1:
..L2:
                                                          #75.12
        pushq     %rbp                                          #75.12
	.cfi_def_cfa_offset 16
        movq      %rsp, %rbp                                    #75.12
	.cfi_def_cfa 6, 16
	.cfi_offset 6, -16
        andq      $-128, %rsp                                   #75.12
        pushq     %r13                                          #75.12
        pushq     %r14                                          #75.12
        subq      $368, %rsp                                    #75.12
        xorl      %esi, %esi                                    #75.12
        pushq     $3                                            #75.12
        popq      %rdi                                          #75.12
        call      __intel_new_feature_proc_init                 #75.12
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0x80, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0x80, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
                                # LOE rbx r12 r15
..B1.29:                        # Preds ..B1.1
                                # Execution count [0.00e+00]
        vstmxcsr  (%rsp)                                        #75.12
        movl      $.2.21_2_kmpc_loc_struct_pack.7, %edi         #75.12
        xorl      %esi, %esi                                    #75.12
        orl       $32832, (%rsp)                                #75.12
        xorl      %eax, %eax                                    #75.12
        vldmxcsr  (%rsp)                                        #75.12
..___tag_value_main.8:
        call      __kmpc_begin                                  #75.12
..___tag_value_main.9:
                                # LOE rbx r12 r15
..B1.2:                         # Preds ..B1.29
                                # Execution count [1.00e+00]
        lea       256(%rsp), %rdi                               #91.9
..___tag_value_main.10:
#       set256(__m256i *)
        call      set256                                        #91.9
..___tag_value_main.11:
                                # LOE rbx r12 r15
..B1.3:                         # Preds ..B1.2
                                # Execution count [1.00e+00]
        movl      $.L_2__STRING.4, %edi                         #93.5
        movl      $16384, %esi                                  #93.5
        xorl      %eax, %eax                                    #93.5
..___tag_value_main.12:
#       printf(const char *__restrict__, ...)
        call      printf                                        #93.5
..___tag_value_main.13:
                                # LOE rbx r12 r15
..B1.4:                         # Preds ..B1.3
                                # Execution count [1.00e+00]
        movl      $131072, %edi                                 #96.21
        movl      $4096, %esi                                   #96.21
#       _mm_malloc(size_t, size_t)
        call      _mm_malloc                                    #96.21
                                # LOE rax rbx r12 r15
..B1.30:                        # Preds ..B1.4
                                # Execution count [1.00e+00]
        movq      %rax, %r13                                    #96.21
                                # LOE rbx r12 r13 r15
..B1.5:                         # Preds ..B1.30
                                # Execution count [1.00e+00]
        testq     %r13, %r13                                    #100.5
        je        ..B1.26       # Prob 0%                       #100.5
                                # LOE rbx r12 r13 r15
..B1.6:                         # Preds ..B1.5
                                # Execution count [9.95e-01]
        vmovdqu   .L_2il0floatpacket.0(%rip), %xmm2             #103.9
        xorl      %eax, %eax                                    #102.5
        vmovdqu   .L_2il0floatpacket.1(%rip), %xmm1             #103.9
                                # LOE rax rbx r12 r13 r15 xmm1 xmm2
..B1.7:                         # Preds ..B1.7 ..B1.6
                                # Execution count [1.63e+04]
        vcvtdq2pd %xmm1, %ymm0                                  #103.18
        vpaddd    %xmm2, %xmm1, %xmm1                           #103.9
        vmovupd   %ymm0, (%r13,%rax,8)                          #103.9
        addq      $4, %rax                                      #102.5
        cmpq      $16384, %rax                                  #102.5
        jb        ..B1.7        # Prob 99%                      #102.5
                                # LOE rax rbx r12 r13 r15 xmm1 xmm2
..B1.8:                         # Preds ..B1.7
                                # Execution count [9.95e-01]
        xorb      %r14b, %r14b                                  #106.16
                                # LOE rbx r12 r13 r15 r14b
..B1.9:                         # Preds ..B1.14 ..B1.8
                                # Execution count [2.98e+00]
        vzeroupper                                              #107.9
..___tag_value_main.14:
#       sg_zero_time(void)
        call      sg_zero_time                                  #107.9
..___tag_value_main.15:
                                # LOE rbx r12 r13 r15 r14b
..B1.10:                        # Preds ..B1.9
                                # Execution count [2.98e+00]
..___tag_value_main.16:
#       dgemm()
        call      dgemm                                         #108.30
..___tag_value_main.17:
                                # LOE rbx r12 r13 r15 r14b xmm0
..B1.11:                        # Preds ..B1.10
                                # Execution count [2.98e+00]
        movl      $.L_2__STRING.6, %edi                         #108.9
        xorl      %eax, %eax                                    #108.9
        incl      %eax                                          #108.9
..___tag_value_main.18:
#       printf(const char *__restrict__, ...)
        call      printf                                        #108.9
..___tag_value_main.19:
                                # LOE rbx r12 r13 r15 r14b
..B1.12:                        # Preds ..B1.11
                                # Execution count [2.98e+00]
..___tag_value_main.20:
#       sg_get_time_ms(void)
        call      sg_get_time_ms                                #109.31
..___tag_value_main.21:
                                # LOE rbx r12 r13 r15 r14b xmm0
..B1.13:                        # Preds ..B1.12
                                # Execution count [2.98e+00]
        vdivsd    .L_2il0floatpacket.2(%rip), %xmm0, %xmm0      #109.50
        vmovsd    .L_2il0floatpacket.3(%rip), %xmm1             #111.9
        movl      $.L_2__STRING.7, %edi                         #111.9
        pushq     $2                                            #111.9
        popq      %rax                                          #111.9
        vdivsd    %xmm0, %xmm1, %xmm1                           #111.9
..___tag_value_main.22:
#       printf(const char *__restrict__, ...)
        call      printf                                        #111.9
..___tag_value_main.23:
                                # LOE rbx r12 r13 r15 r14b
..B1.14:                        # Preds ..B1.13
                                # Execution count [2.98e+00]
        incb      %r14b                                         #106.28
        cmpb      $3, %r14b                                     #106.25
        jl        ..B1.9        # Prob 66%                      #106.25
                                # LOE rbx r12 r13 r15 r14b
..B1.15:                        # Preds ..B1.14
                                # Execution count [4.98e-01]
        vmovdqu   256(%rsp), %ymm0                              #117.9
        movl      $16384, %edi                                  #117.9
        movq      %r13, %rsi                                    #117.9
        lea       (%rsp), %rdx                                  #117.9
        lea       64(%rdx), %rcx                                #117.9
        lea       128(%rdx), %r8                                #117.9
        lea       192(%rdx), %r9                                #117.9
..___tag_value_main.24:
#       gather(int, double *, __m512d *, __m512d *, __m512d *, __m512d *, __m256i)
        call      gather                                        #117.9
..___tag_value_main.25:
                                # LOE rbx r12 r13 r15
..B1.16:                        # Preds ..B1.15
                                # Execution count [9.95e-01]
..___tag_value_main.26:
#       sg_zero_time(void)
        call      sg_zero_time                                  #120.5
..___tag_value_main.27:
                                # LOE rbx r12 r13 r15
..B1.17:                        # Preds ..B1.16
                                # Execution count [8.96e-01]
        xorl      %r14d, %r14d                                  #121.16
                                # LOE rbx r12 r13 r15 r14d
..B1.18:                        # Preds ..B1.19 ..B1.17
                                # Execution count [4.97e+00]
        movl      $16384, %edi                                  #128.17
        movq      %r13, %rsi                                    #128.17
        lea       (%rsp), %rdx                                  #128.17
        lea       64(%rdx), %rcx                                #128.17
        lea       128(%rdx), %r8                                #128.17
        lea       192(%rdx), %r9                                #128.17
..___tag_value_main.28:
#       gather_contig(int, double *, __m512d *, __m512d *, __m512d *, __m512d *)
        call      gather_contig                                 #128.17
..___tag_value_main.29:
                                # LOE rbx r12 r13 r15 r14d
..B1.19:                        # Preds ..B1.18
                                # Execution count [4.97e+00]
        incl      %r14d                                         #121.33
        cmpl      $100083, %r14d                                #121.25
        jl        ..B1.18       # Prob 82%                      #121.25
                                # LOE rbx r12 r13 r15 r14d
..B1.20:                        # Preds ..B1.19
                                # Execution count [9.95e-01]
..___tag_value_main.30:
#       sg_get_time_ms(void)
        call      sg_get_time_ms                                #134.22
..___tag_value_main.31:
                                # LOE rbx r12 r13 r15 xmm0
..B1.21:                        # Preds ..B1.20
                                # Execution count [9.95e-01]
        vdivsd    .L_2il0floatpacket.4(%rip), %xmm0, %xmm2      #134.39
        vdivsd    .L_2il0floatpacket.2(%rip), %xmm2, %xmm1      #135.31
        vmulsd    .L_2il0floatpacket.7(%rip), %xmm1, %xmm5      #148.5
        movl      $.L_2__STRING.8, %edi                         #148.5
        vmovsd    .L_2il0floatpacket.5(%rip), %xmm3             #148.5
        pushq     $3                                            #148.5
        popq      %rax                                          #148.5
        vmovsd    .L_2il0floatpacket.6(%rip), %xmm4             #148.5
        vdivsd    %xmm1, %xmm3, %xmm0                           #148.5
        vdivsd    %xmm5, %xmm4, %xmm2                           #148.5
..___tag_value_main.32:
#       printf(const char *__restrict__, ...)
        call      printf                                        #148.5
..___tag_value_main.33:
                                # LOE rbx r12 r13 r15
..B1.22:                        # Preds ..B1.21
                                # Execution count [9.95e-01]
        movl      $.L_2__STRING.9, %edi                         #152.3
        pushq     $8                                            #152.3
        popq      %rax                                          #152.3
        lea       (%rsp), %rdx                                  #152.3
        vmovsd    (%rdx), %xmm0                                 #152.3
        vmovsd    8(%rdx), %xmm1                                #152.3
        vmovsd    16(%rdx), %xmm2                               #152.3
        vmovsd    24(%rdx), %xmm3                               #152.3
        vmovsd    32(%rdx), %xmm4                               #152.3
        vmovsd    40(%rdx), %xmm5                               #152.3
        vmovsd    48(%rdx), %xmm6                               #152.3
        vmovsd    56(%rdx), %xmm7                               #152.3
..___tag_value_main.34:
#       printf(const char *__restrict__, ...)
        call      printf                                        #152.3
..___tag_value_main.35:
                                # LOE rbx r12 r13 r15
..B1.23:                        # Preds ..B1.22
                                # Execution count [9.95e-01]
        movq      %r13, %rdi                                    #155.5
#       _mm_free(void *)
        call      _mm_free                                      #155.5
                                # LOE rbx r12 r15
..B1.24:                        # Preds ..B1.23
                                # Execution count [9.95e-01]
        movl      $.2.21_2_kmpc_loc_struct_pack.18, %edi        #159.10
        xorl      %eax, %eax                                    #159.10
..___tag_value_main.36:
        call      __kmpc_end                                    #159.10
..___tag_value_main.37:
                                # LOE rbx r12 r15
..B1.25:                        # Preds ..B1.24
                                # Execution count [9.95e-01]
        xorl      %eax, %eax                                    #159.10
        addq      $368, %rsp                                    #159.10
        popq      %r14                                          #159.10
        popq      %r13                                          #159.10
        movq      %rbp, %rsp                                    #159.10
        popq      %rbp                                          #159.10
	.cfi_def_cfa 7, 8
        ret                                                     #159.10
	.cfi_def_cfa 6, 16
                                # LOE
..B1.26:                        # Preds ..B1.5
                                # Execution count [5.00e-03]: Infreq
        movl      $.L_2__STRING.5, %edi                         #100.5
        movl      $.L_2__STRING.1, %esi                         #100.5
        pushq     $100                                          #100.5
        popq      %rdx                                          #100.5
        movl      $__$U1, %ecx                                  #100.5
#       __assert_fail(const char *, const char *, unsigned int, const char *)
        call      __assert_fail                                 #100.5
                                # LOE
	.cfi_endproc
# mark_end;
	.type	main,@function
	.size	main,.-main
..LNmain.0:
	.data
	.align 4
	.align 4
.2.21_2_kmpc_loc_struct_pack.7:
	.long	0
	.long	2
	.long	0
	.long	0
	.quad	.2.21_2__kmpc_loc_pack.6
	.align 4
.2.21_2__kmpc_loc_pack.6:
	.byte	59
	.byte	117
	.byte	110
	.byte	107
	.byte	110
	.byte	111
	.byte	119
	.byte	110
	.byte	59
	.byte	109
	.byte	97
	.byte	105
	.byte	110
	.byte	59
	.byte	55
	.byte	53
	.byte	59
	.byte	55
	.byte	53
	.byte	59
	.byte	59
	.space 3, 0x00 	# pad
	.align 4
.2.21_2_kmpc_loc_struct_pack.18:
	.long	0
	.long	2
	.long	0
	.long	0
	.quad	.2.21_2__kmpc_loc_pack.17
	.align 4
.2.21_2__kmpc_loc_pack.17:
	.byte	59
	.byte	117
	.byte	110
	.byte	107
	.byte	110
	.byte	111
	.byte	119
	.byte	110
	.byte	59
	.byte	109
	.byte	97
	.byte	105
	.byte	110
	.byte	59
	.byte	49
	.byte	53
	.byte	57
	.byte	59
	.byte	49
	.byte	53
	.byte	57
	.byte	59
	.byte	59
	.data
# -- End  main
	.text
.L_2__routine_start_dgemm_1:
# -- Begin  dgemm
	.text
# mark_begin;

	.globl dgemm
# --- dgemm()
dgemm:
..B2.1:                         # Preds ..B2.0
                                # Execution count [1.00e+00]
	.cfi_startproc
..___tag_value_dgemm.41:
..L42:
                                                         #34.16
        pushq     %rbp                                          #34.16
	.cfi_def_cfa_offset 16
        movq      %rsp, %rbp                                    #34.16
	.cfi_def_cfa 6, 16
	.cfi_offset 6, -16
        andq      $-64, %rsp                                    #34.16
        pushq     %r12                                          #34.16
        pushq     %r13                                          #34.16
        pushq     %r14                                          #34.16
        pushq     %r15                                          #34.16
        pushq     %rbx                                          #34.16
        subq      $88, %rsp                                     #34.16
        movl      $8388608, %edi                                #36.27
#       malloc(size_t)
        call      malloc                                        #36.27
	.cfi_escape 0x10, 0x03, 0x0e, 0x38, 0x1c, 0x0d, 0xc0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xd8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0c, 0x0e, 0x38, 0x1c, 0x0d, 0xc0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0d, 0x0e, 0x38, 0x1c, 0x0d, 0xc0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xf0, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0e, 0x0e, 0x38, 0x1c, 0x0d, 0xc0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe8, 0xff, 0xff, 0xff, 0x22
	.cfi_escape 0x10, 0x0f, 0x0e, 0x38, 0x1c, 0x0d, 0xc0, 0xff, 0xff, 0xff, 0x1a, 0x0d, 0xe0, 0xff, 0xff, 0xff, 0x22
                                # LOE rax
..B2.30:                        # Preds ..B2.1
                                # Execution count [1.00e+00]
        movq      %rax, %r12                                    #36.27
                                # LOE r12
..B2.2:                         # Preds ..B2.30
                                # Execution count [1.00e+00]
        movl      $8388608, %edi                                #37.27
#       malloc(size_t)
        call      malloc                                        #37.27
                                # LOE rax r12
..B2.31:                        # Preds ..B2.2
                                # Execution count [1.00e+00]
        movq      %rax, %rbx                                    #37.27
                                # LOE rbx r12
..B2.3:                         # Preds ..B2.31
                                # Execution count [1.00e+00]
        movl      $8388608, %edi                                #38.27
#       malloc(size_t)
        call      malloc                                        #38.27
                                # LOE rax rbx r12
..B2.32:                        # Preds ..B2.3
                                # Execution count [1.00e+00]
        movq      %rax, (%rsp)                                  #38.27[spill]
                                # LOE rbx r12
..B2.4:                         # Preds ..B2.32
                                # Execution count [1.00e+00]
        testq     %r12, %r12                                    #39.5
        je        ..B2.27       # Prob 0%                       #39.5
                                # LOE rbx r12
..B2.5:                         # Preds ..B2.4
                                # Execution count [9.95e-01]
        testq     %rbx, %rbx                                    #39.16
        je        ..B2.26       # Prob 0%                       #39.16
                                # LOE rbx r12
..B2.6:                         # Preds ..B2.5
                                # Execution count [9.90e-01]
        cmpq      $0, (%rsp)                                    #39.27[spill]
        je        ..B2.25       # Prob 0%                       #39.27
                                # LOE rbx r12
..B2.7:                         # Preds ..B2.6
                                # Execution count [9.85e-01]
#       rand(void)
        call      rand                                          #41.17
                                # LOE rbx r12 eax
..B2.8:                         # Preds ..B2.7
                                # Execution count [9.85e-01]
        cltq                                                    #41.17
        movq      %rax, %rdx                                    #41.26
        sarq      $9, %rdx                                      #41.26
        shrq      $54, %rdx                                     #41.26
        addq      %rax, %rdx                                    #41.26
        andq      $-1024, %rdx                                  #41.26
        subq      %rdx, %rax                                    #41.17
        movq      %rax, 24(%rsp)                                #41.17[spill]
        movl      %eax, %r13d                                   #41.26
#       rand(void)
        call      rand                                          #42.17
                                # LOE rbx r12 eax r13d
..B2.9:                         # Preds ..B2.8
                                # Execution count [9.38e-01]
        cltq                                                    #42.17
        vxorpd    %xmm0, %xmm0, %xmm0                           #45.15
        movq      %rax, %rdx                                    #42.26
        vxorpd    %xmm1, %xmm1, %xmm1                           #46.15
        sarq      $9, %rdx                                      #42.26
        shrq      $54, %rdx                                     #42.26
        addq      %rax, %rdx                                    #42.26
        andq      $-1024, %rdx                                  #42.26
        subq      %rdx, %rax                                    #42.17
        xorl      %edx, %edx                                    #44.5
        movq      %rax, 32(%rsp)                                #42.17[spill]
        vcvtsi2sd %r13d, %xmm0, %xmm0                           #45.15
        vcvtsi2sd %eax, %xmm1, %xmm1                            #46.15
        vbroadcastsd %xmm0, %ymm2                               #45.15
        vbroadcastsd %xmm1, %ymm0                               #46.15
                                # LOE rdx rbx r12 ymm0 ymm2
..B2.10:                        # Preds ..B2.10 ..B2.9
                                # Execution count [9.85e+05]
        vmovupd   %ymm2, (%r12,%rdx,8)                          #45.8
        vmovupd   %ymm0, (%rbx,%rdx,8)                          #46.8
        addq      $4, %rdx                                      #44.5
        cmpq      $1048576, %rdx                                #44.5
        jb        ..B2.10       # Prob 99%                      #44.5
                                # LOE rdx rbx r12 ymm0 ymm2
..B2.11:                        # Preds ..B2.10
                                # Execution count [0.00e+00]
        movq      $0, 8(%rsp)                                   #51.5[spill]
                                # LOE rbx r12
..B2.12:                        # Preds ..B2.20 ..B2.11
                                # Execution count [0.00e+00]
        movq      8(%rsp), %rax                                 #56.20[spill]
        movl      %eax, %r8d                                    #56.20
        shll      $5, %r8d                                      #56.33
        xorl      %r10d, %r10d                                  #52.9
        lea       32(%r8), %r9d                                 #56.44
        incl      %r8d                                          #56.33
        subl      %r8d, %r9d                                    #56.44
        movq      %rax, %r8                                     #57.25
        shlq      $18, %rax                                     #57.25
        incl      %r9d                                          #56.44
        shlq      $8, %r8                                       #57.25
        addq      %rbx, %rax                                    #57.45
        movslq    %r9d, %r9                                     #56.20
        addq      %r12, %r8                                     #57.32
        movq      %rax, 40(%rsp)                                #57.45[spill]
                                # LOE rbx r8 r9 r10 r12
..B2.13:                        # Preds ..B2.19 ..B2.12
                                # Execution count [0.00e+00]
        movq      %r10, %rdx                                    #52.35
        xorl      %esi, %esi                                    #53.13
        shlq      $8, %rdx                                      #52.35
        movq      40(%rsp), %rax                                #57.45[spill]
        movq      %rdx, 16(%rsp)                                #52.35[spill]
        addq      %rax, %rdx                                    #57.45
        xorl      %eax, %eax                                    #53.13
                                # LOE rax rdx rbx r8 r9 r10 r12 esi
..B2.14:                        # Preds ..B2.18 ..B2.13
                                # Execution count [1.01e+02]
        movq      (%rsp), %r11                                  #55.33[spill]
        xorl      %ecx, %ecx                                    #54.16
        lea       (%r8,%rax), %r15                              #57.32
        lea       (%r11,%rax), %rdi                             #55.33
        addq      16(%rsp), %rdi                                #55.33[spill]
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r12 r15 esi
..B2.15:                        # Preds ..B2.17 ..B2.14
                                # Execution count [5.64e+02]
        xorl      %r14d, %r14d                                  #56.20
        lea       (%rdx,%rcx,8), %r13                           #57.45
        vmovsd    (%rdi), %xmm6                                 #55.33
        xorl      %r11d, %r11d                                  #56.20
        vxorpd    %ymm5, %ymm5, %ymm5                           #55.31
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r13 r14 r15 esi xmm6 ymm5
..B2.16:                        # Preds ..B2.16 ..B2.15
                                # Execution count [3.13e+03]
        vmovsd    (%r11,%r13), %xmm0                            #57.45
        vmovsd    16384(%r11,%r13), %xmm1                       #57.45
        vmovhpd   8192(%r11,%r13), %xmm0, %xmm2                 #57.45
        vmovhpd   24576(%r11,%r13), %xmm1, %xmm3                #57.45
        addq      $32768, %r11                                  #56.20
        vinsertf128 $1, %xmm3, %ymm2, %ymm4                     #57.45
        vfmadd231pd (%r15,%r14,8), %ymm4, %ymm5                 #57.25
        addq      $4, %r14                                      #56.20
        cmpq      %r9, %r14                                     #56.20
        jb        ..B2.16       # Prob 82%                      #56.20
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r11 r12 r13 r14 r15 esi xmm6 ymm5
..B2.17:                        # Preds ..B2.16
                                # Execution count [5.64e+02]
        incq      %rcx                                          #54.16
        vextractf128 $1, %ymm5, %xmm0                           #55.31
        vaddpd    %xmm0, %xmm5, %xmm1                           #55.31
        vunpckhpd %xmm1, %xmm1, %xmm2                           #55.31
        vaddsd    %xmm2, %xmm1, %xmm3                           #55.31
        vaddsd    %xmm3, %xmm6, %xmm4                           #55.31
        vmovsd    %xmm4, (%rdi)                                 #59.20
        addq      $8, %rdi                                      #54.47
        cmpq      $32, %rcx                                     #54.16
        jb        ..B2.15       # Prob 82%                      #54.16
                                # LOE rax rdx rcx rbx rdi r8 r9 r10 r12 r15 esi
..B2.18:                        # Preds ..B2.17
                                # Execution count [1.25e+02]
        incl      %esi                                          #53.13
        addq      $8192, %rax                                   #53.13
        cmpl      $1024, %esi                                   #53.13
        jb        ..B2.14       # Prob 82%                      #53.13
                                # LOE rax rdx rbx r8 r9 r10 r12 esi
..B2.19:                        # Preds ..B2.18
                                # Execution count [2.25e+01]
        incq      %r10                                          #52.9
        cmpq      $32, %r10                                     #52.9
        jb        ..B2.13       # Prob 91%                      #52.9
                                # LOE rbx r8 r9 r10 r12
..B2.20:                        # Preds ..B2.19
                                # Execution count [4.11e+00]
        movq      8(%rsp), %rax                                 #51.5[spill]
        incq      %rax                                          #51.5
        movq      %rax, 8(%rsp)                                 #51.5[spill]
        cmpq      $32, %rax                                     #51.5
        jb        ..B2.12       # Prob 99%                      #51.5
                                # LOE rbx r12
..B2.21:                        # Preds ..B2.20
                                # Execution count [9.02e-01]
        movslq    24(%rsp), %rcx                                #65.20[spill]
        movq      %r12, %rdi                                    #67.5
        shlq      $10, %rcx                                     #65.26
        movslq    32(%rsp), %rax                                #65.32[spill]
        addq      %rax, %rcx                                    #65.32
        movq      (%rsp), %rdx                                  #65.18[spill]
        vmovsd    (%rdx,%rcx,8), %xmm0                          #65.18
        vmovsd    %xmm0, 8(%rsp)                                #65.18[spill]
        vzeroupper                                              #67.5
#       free(void *)
        call      free                                          #67.5
                                # LOE rbx
..B2.22:                        # Preds ..B2.21
                                # Execution count [9.02e-01]
        movq      %rbx, %rdi                                    #68.5
#       free(void *)
        call      free                                          #68.5
                                # LOE
..B2.23:                        # Preds ..B2.22
                                # Execution count [9.02e-01]
        movq      (%rsp), %rdi                                  #69.5[spill]
#       free(void *)
        call      free                                          #69.5
                                # LOE
..B2.24:                        # Preds ..B2.23
                                # Execution count [9.02e-01]
        vmovsd    8(%rsp), %xmm0                                #71.12[spill]
        addq      $88, %rsp                                     #71.12
        popq      %rbx                                          #71.12
        popq      %r15                                          #71.12
        popq      %r14                                          #71.12
        popq      %r13                                          #71.12
        popq      %r12                                          #71.12
        movq      %rbp, %rsp                                    #71.12
        popq      %rbp                                          #71.12
	.cfi_def_cfa 7, 8
        ret                                                     #71.12
	.cfi_def_cfa 6, 16
                                # LOE
..B2.25:                        # Preds ..B2.6
                                # Execution count [4.95e-03]: Infreq
        movl      $.L_2__STRING.3, %edi                         #39.27
        jmp       ..B2.37       # Prob 100%                     #39.27
                                # LOE
..B2.26:                        # Preds ..B2.5
                                # Execution count [4.97e-03]: Infreq
        movl      $.L_2__STRING.2, %edi                         #39.16
        jmp       ..B2.37       # Prob 100%                     #39.16
                                # LOE
..B2.27:                        # Preds ..B2.4
                                # Execution count [5.00e-03]: Infreq
        movl      $.L_2__STRING.0, %edi                         #39.5
                                # LOE
..B2.37:                        # Preds ..B2.25 ..B2.26 ..B2.27
                                # Execution count [5.00e-03]: Infreq
        movl      $.L_2__STRING.1, %esi                         #39.5
        pushq     $39                                           #39.5
        popq      %rdx                                          #39.5
        movl      $__$U0, %ecx                                  #39.5
#       __assert_fail(const char *, const char *, unsigned int, const char *)
        call      __assert_fail                                 #39.5
                                # LOE
	.cfi_endproc
# mark_end;
	.type	dgemm,@function
	.size	dgemm,.-dgemm
..LNdgemm.1:
	.data
# -- End  dgemm
	.text
.L_2__routine_start_gatherms1_2:
# -- Begin  gatherms1
	.text
# mark_begin;

	.globl gatherms1
# --- gatherms1(int, double *, __m512d *, __m512d *, __m512d *, __m512d *, __m256i)
gatherms1:
# parameter 1: %edi
# parameter 2: %rsi
# parameter 3: %rdx
# parameter 4: %rcx
# parameter 5: %r8
# parameter 6: %r9
# parameter 7: %ymm0
..B3.1:                         # Preds ..B3.0
                                # Execution count [1.00e+00]
	.cfi_startproc
..___tag_value_gatherms1.73:
..L74:
                                                         #234.1
        movq      %rdx, %r10                                    #234.1
        movq      %rsi, %rdi                                    #234.1
        xorl      %esi, %esi                                    #236.16
        xorl      %edx, %edx                                    #236.16
                                # LOE rdx rcx rbx rbp rdi r8 r9 r10 r12 r13 r14 r15 esi zmm0
..B3.2:                         # Preds ..B3.2 ..B3.1
                                # Execution count [2.56e+02]
        kxnorw    %k0, %k0, %k1                                 #237.17
        lea       (%rdi,%rdx,8), %rax                           #237.17
        kxnorw    %k0, %k0, %k2                                 #238.17
        kxnorw    %k0, %k0, %k3                                 #239.17
        kxnorw    %k0, %k0, %k4                                 #240.17
        addl      $4, %esi                                      #236.39
        addq      $64, %rdx                                     #236.39
        vpxord    %zmm1, %zmm1, %zmm1                           #237.17
        vpxord    %zmm2, %zmm2, %zmm2                           #238.17
        vpxord    %zmm3, %zmm3, %zmm3                           #239.17
        vpxord    %zmm4, %zmm4, %zmm4                           #240.17
        vgatherdpd (%rax,%ymm0,8), %zmm1{%k1}                   #237.17
        vmovups   %zmm1, (%r10)                                 #237.10
        vgatherdpd 128(%rax,%ymm0,8), %zmm2{%k2}                #238.17
        vmovups   %zmm2, (%rcx)                                 #238.10
        vgatherdpd 256(%rax,%ymm0,8), %zmm3{%k3}                #239.17
        vmovups   %zmm3, (%r8)                                  #239.10
        vgatherdpd 384(%rax,%ymm0,8), %zmm4{%k4}                #240.17
        vmovups   %zmm4, (%r9)                                  #240.10
        cmpl      $1024, %esi                                   #236.25
        jl        ..B3.2        # Prob 99%                      #236.25
                                # LOE rdx rcx rbx rbp rdi r8 r9 r10 r12 r13 r14 r15 esi zmm0
..B3.3:                         # Preds ..B3.2
                                # Execution count [1.00e+00]
        vzeroupper                                              #242.1
        ret                                                     #242.1
                                # LOE
	.cfi_endproc
# mark_end;
	.type	gatherms1,@function
	.size	gatherms1,.-gatherms1
..LNgatherms1.2:
	.data
# -- End  gatherms1
	.text
.L_2__routine_start_gather8_3:
# -- Begin  gather8
	.text
# mark_begin;

	.globl gather8
# --- gather8(int, double *, __m512d *, __m256i)
gather8:
# parameter 1: %edi
# parameter 2: %rsi
# parameter 3: %rdx
# parameter 4: %ymm0
..B4.1:                         # Preds ..B4.0
                                # Execution count [1.00e+00]
	.cfi_startproc
..___tag_value_gather8.76:
..L77:
                                                         #202.1
        movq      %rdx, %rdi                                    #202.1
        xorl      %ecx, %ecx                                    #204.16
                                # LOE rbx rbp rsi rdi r12 r13 r14 r15 ecx zmm0
..B4.2:                         # Preds ..B4.2 ..B4.1
                                # Execution count [2.56e+02]
        kxnorw    %k0, %k0, %k2                                 #215.18
        lea       (,%rcx,8), %eax                               #214.18
        kxnorw    %k1, %k1, %k1                                 #214.18
        kxnorw    %k0, %k0, %k3                                 #216.18
        kxnorw    %k0, %k0, %k4                                 #217.18
        kxnorw    %k0, %k0, %k5                                 #218.18
        kxnorw    %k0, %k0, %k6                                 #219.18
        kxnorw    %k0, %k0, %k7                                 #220.18
        addl      $8, %ecx                                      #204.38
        lea       (%rsi,%rax,8), %rdx                           #214.18
        vpxord    %zmm1, %zmm1, %zmm1                           #214.18
        vpxord    %zmm2, %zmm2, %zmm2                           #215.18
        vpxord    %zmm3, %zmm3, %zmm3                           #216.18
        vpxord    %zmm4, %zmm4, %zmm4                           #217.18
        vpxord    %zmm5, %zmm5, %zmm5                           #218.18
        vpxord    %zmm6, %zmm6, %zmm6                           #219.18
        vpxord    %zmm7, %zmm7, %zmm7                           #220.18
        vpxord    %zmm8, %zmm8, %zmm8                           #221.18
        vgatherdpd (%rdx,%ymm0,8), %zmm1{%k1}                   #214.18
        kxnorw    %k0, %k0, %k1                                 #221.18
        vmovups   %zmm1, (%rdi)                                 #214.9
        vgatherdpd 64(%rdx,%ymm0,8), %zmm2{%k2}                 #215.18
        vmovups   %zmm2, 64(%rdi)                               #215.9
        vgatherdpd 128(%rdx,%ymm0,8), %zmm3{%k3}                #216.18
        vmovups   %zmm3, 128(%rdi)                              #216.9
        vgatherdpd 192(%rdx,%ymm0,8), %zmm4{%k4}                #217.18
        vmovups   %zmm4, 192(%rdi)                              #217.9
        vgatherdpd 256(%rdx,%ymm0,8), %zmm5{%k5}                #218.18
        vmovups   %zmm5, 256(%rdi)                              #218.9
        vgatherdpd 320(%rdx,%ymm0,8), %zmm6{%k6}                #219.18
        vmovups   %zmm6, 320(%rdi)                              #219.9
        vgatherdpd 384(%rdx,%ymm0,8), %zmm7{%k7}                #220.18
        vmovups   %zmm7, 384(%rdi)                              #220.9
        vgatherdpd 448(%rdx,%ymm0,8), %zmm8{%k1}                #221.18
        vmovups   %zmm8, 448(%rdi)                              #221.9
        cmpl      $2048, %ecx                                   #204.25
        jl        ..B4.2        # Prob 99%                      #204.25
                                # LOE rbx rbp rsi rdi r12 r13 r14 r15 ecx zmm0
..B4.3:                         # Preds ..B4.2
                                # Execution count [1.00e+00]
        vzeroupper                                              #230.1
        ret                                                     #230.1
                                # LOE
	.cfi_endproc
# mark_end;
	.type	gather8,@function
	.size	gather8,.-gather8
..LNgather8.3:
	.data
# -- End  gather8
	.text
.L_2__routine_start_gather_contig_4:
# -- Begin  gather_contig
	.text
# mark_begin;

	.globl gather_contig
# --- gather_contig(int, double *, __m512d *, __m512d *, __m512d *, __m512d *)
gather_contig:
# parameter 1: %edi
# parameter 2: %rsi
# parameter 3: %rdx
# parameter 4: %rcx
# parameter 5: %r8
# parameter 6: %r9
..B5.1:                         # Preds ..B5.0
                                # Execution count [1.00e+00]
	.cfi_startproc
..___tag_value_gather_contig.79:
..L80:
                                                         #191.1
        movq      %rdx, %rdi                                    #191.1
        xorl      %edx, %edx                                    #192.16
                                # LOE rcx rbx rbp rsi rdi r8 r9 r12 r13 r14 r15 edx
..B5.2:                         # Preds ..B5.2 ..B5.1
                                # Execution count [5.12e+02]
        lea       (,%rdx,8), %eax                               #193.42
        addl      $4, %edx                                      #192.38
        vmovups   (%rsi,%rax,8), %zmm0                          #193.32
        vmovups   %zmm0, (%rdi)                                 #193.10
        vmovups   64(%rsi,%rax,8), %zmm1                        #194.32
        vmovups   %zmm1, (%rcx)                                 #194.10
        vmovups   128(%rsi,%rax,8), %zmm2                       #195.32
        vmovups   %zmm2, (%r8)                                  #195.10
        vmovups   192(%rsi,%rax,8), %zmm3                       #196.32
        vmovups   %zmm3, (%r9)                                  #196.10
        cmpl      $2048, %edx                                   #192.25
        jl        ..B5.2        # Prob 99%                      #192.25
                                # LOE rcx rbx rbp rsi rdi r8 r9 r12 r13 r14 r15 edx
..B5.3:                         # Preds ..B5.2
                                # Execution count [1.00e+00]
        vzeroupper                                              #199.1
        ret                                                     #199.1
                                # LOE
	.cfi_endproc
# mark_end;
	.type	gather_contig,@function
	.size	gather_contig,.-gather_contig
..LNgather_contig.4:
	.data
# -- End  gather_contig
	.text
.L_2__routine_start_gather_5:
# -- Begin  gather
	.text
# mark_begin;

	.globl gather
# --- gather(int, double *, __m512d *, __m512d *, __m512d *, __m512d *, __m256i)
gather:
# parameter 1: %edi
# parameter 2: %rsi
# parameter 3: %rdx
# parameter 4: %rcx
# parameter 5: %r8
# parameter 6: %r9
# parameter 7: %ymm0
..B6.1:                         # Preds ..B6.0
                                # Execution count [1.00e+00]
	.cfi_startproc
..___tag_value_gather.82:
..L83:
                                                         #163.1
        movq      %rsi, %r10                                    #163.1
        xorl      %edi, %edi                                    #165.16
                                # LOE rdx rcx rbx rbp r8 r9 r10 r12 r13 r14 r15 edi zmm0
..B6.2:                         # Preds ..B6.2 ..B6.1
                                # Execution count [5.12e+02]
        kxnorw    %k0, %k0, %k1                                 #175.17
        lea       (,%rdi,8), %eax                               #175.17
        kxnorw    %k0, %k0, %k2                                 #176.17
        kxnorw    %k0, %k0, %k3                                 #177.17
        kxnorw    %k0, %k0, %k4                                 #178.17
        addl      $4, %edi                                      #165.38
        lea       (%r10,%rax,8), %rsi                           #175.17
        vpxord    %zmm1, %zmm1, %zmm1                           #175.17
        vpxord    %zmm2, %zmm2, %zmm2                           #176.17
        vpxord    %zmm3, %zmm3, %zmm3                           #177.17
        vpxord    %zmm4, %zmm4, %zmm4                           #178.17
        vgatherdpd (%rsi,%ymm0,8), %zmm1{%k1}                   #175.17
        vmovups   %zmm1, (%rdx)                                 #175.10
        vgatherdpd 64(%rsi,%ymm0,8), %zmm2{%k2}                 #176.17
        vmovups   %zmm2, (%rcx)                                 #176.10
        vgatherdpd 128(%rsi,%ymm0,8), %zmm3{%k3}                #177.17
        vmovups   %zmm3, (%r8)                                  #177.10
        vgatherdpd 192(%rsi,%ymm0,8), %zmm4{%k4}                #178.17
        vmovups   %zmm4, (%r9)                                  #178.10
        cmpl      $2048, %edi                                   #165.25
        jl        ..B6.2        # Prob 99%                      #165.25
                                # LOE rdx rcx rbx rbp r8 r9 r10 r12 r13 r14 r15 edi zmm0
..B6.3:                         # Preds ..B6.2
                                # Execution count [1.00e+00]
        vzeroupper                                              #188.1
        ret                                                     #188.1
                                # LOE
	.cfi_endproc
# mark_end;
	.type	gather,@function
	.size	gather,.-gather
..LNgather.5:
	.data
# -- End  gather
	.text
.L_2__routine_start_set256ms1_6:
# -- Begin  set256ms1
	.text
# mark_begin;

	.globl set256ms1
# --- set256ms1(__m256i *)
set256ms1:
# parameter 1: %rdi
..B7.1:                         # Preds ..B7.0
                                # Execution count [1.00e+00]
	.cfi_startproc
..___tag_value_set256ms1.85:
..L86:
                                                         #24.32
        vmovdqu   .L_2il0floatpacket.8(%rip), %ymm0             #25.14
        vmovdqu   %ymm0, (%rdi)                                 #25.6
        vzeroupper                                              #26.1
        ret                                                     #26.1
                                # LOE
	.cfi_endproc
# mark_end;
	.type	set256ms1,@function
	.size	set256ms1,.-set256ms1
..LNset256ms1.6:
	.data
# -- End  set256ms1
	.text
.L_2__routine_start_set256_7:
# -- Begin  set256
	.text
# mark_begin;

	.globl set256
# --- set256(__m256i *)
set256:
# parameter 1: %rdi
..B8.1:                         # Preds ..B8.0
                                # Execution count [1.00e+00]
	.cfi_startproc
..___tag_value_set256.88:
..L89:
                                                         #21.29
        vmovdqu   .L_2il0floatpacket.9(%rip), %ymm0             #22.14
        vmovdqu   %ymm0, (%rdi)                                 #22.6
        vzeroupper                                              #23.1
        ret                                                     #23.1
                                # LOE
	.cfi_endproc
# mark_end;
	.type	set256,@function
	.size	set256,.-set256
..LNset256.7:
	.data
# -- End  set256
	.text
.L_2__routine_start_set256ms12_8:
# -- Begin  set256ms12
	.text
# mark_begin;

	.globl set256ms12
# --- set256ms12(__m256i *)
set256ms12:
# parameter 1: %rdi
..B9.1:                         # Preds ..B9.0
                                # Execution count [1.00e+00]
	.cfi_startproc
..___tag_value_set256ms12.91:
..L92:
                                                         #27.33
        vmovdqu   .L_2il0floatpacket.10(%rip), %ymm0            #28.14
        vmovdqu   %ymm0, (%rdi)                                 #28.6
        vzeroupper                                              #29.1
        ret                                                     #29.1
                                # LOE
	.cfi_endproc
# mark_end;
	.type	set256ms12,@function
	.size	set256ms12,.-set256ms12
..LNset256ms12.8:
	.data
# -- End  set256ms12
	.text
.L_2__routine_start_set256ms13_9:
# -- Begin  set256ms13
	.text
# mark_begin;

	.globl set256ms13
# --- set256ms13(__m256i *)
set256ms13:
# parameter 1: %rdi
..B10.1:                        # Preds ..B10.0
                                # Execution count [1.00e+00]
	.cfi_startproc
..___tag_value_set256ms13.94:
..L95:
                                                         #30.33
        vmovdqu   .L_2il0floatpacket.11(%rip), %ymm0            #31.14
        vmovdqu   %ymm0, (%rdi)                                 #31.6
        vzeroupper                                              #32.1
        ret                                                     #32.1
                                # LOE
	.cfi_endproc
# mark_end;
	.type	set256ms13,@function
	.size	set256ms13,.-set256ms13
..LNset256ms13.9:
	.data
# -- End  set256ms13
	.section .rodata, "a"
	.align 32
	.align 32
.L_2il0floatpacket.8:
	.long	0x0000000b,0x0000000a,0x00000009,0x00000008,0x00000003,0x00000002,0x00000001,0x00000000
	.type	.L_2il0floatpacket.8,@object
	.size	.L_2il0floatpacket.8,32
	.align 32
.L_2il0floatpacket.9:
	.long	0x00000007,0x00000006,0x00000005,0x00000004,0x00000003,0x00000002,0x00000001,0x00000000
	.type	.L_2il0floatpacket.9,@object
	.size	.L_2il0floatpacket.9,32
	.align 32
.L_2il0floatpacket.10:
	.long	0x00000019,0x00000018,0x00000011,0x00000010,0x00000009,0x00000008,0x00000001,0x00000000
	.type	.L_2il0floatpacket.10,@object
	.size	.L_2il0floatpacket.10,32
	.align 32
.L_2il0floatpacket.11:
	.long	0x00000038,0x00000030,0x00000028,0x00000020,0x00000018,0x00000010,0x00000008,0x00000000
	.type	.L_2il0floatpacket.11,@object
	.size	.L_2il0floatpacket.11,32
	.align 16
.L_2il0floatpacket.0:
	.long	0x00000004,0x00000004,0x00000004,0x00000004
	.type	.L_2il0floatpacket.0,@object
	.size	.L_2il0floatpacket.0,16
	.align 16
.L_2il0floatpacket.1:
	.long	0x00000000,0x00000001,0x00000002,0x00000003
	.type	.L_2il0floatpacket.1,@object
	.size	.L_2il0floatpacket.1,16
	.align 8
.L_2il0floatpacket.2:
	.long	0x00000000,0x408f4000
	.type	.L_2il0floatpacket.2,@object
	.size	.L_2il0floatpacket.2,8
	.align 8
.L_2il0floatpacket.3:
	.long	0x00000000,0x40a0c600
	.type	.L_2il0floatpacket.3,@object
	.size	.L_2il0floatpacket.3,8
	.align 8
.L_2il0floatpacket.4:
	.long	0x00000000,0x40f86f30
	.type	.L_2il0floatpacket.4,@object
	.size	.L_2il0floatpacket.4,8
	.align 8
.L_2il0floatpacket.5:
	.long	0xa0b5ed8d,0x3fb0c6f7
	.type	.L_2il0floatpacket.5,@object
	.size	.L_2il0floatpacket.5,8
	.align 8
.L_2il0floatpacket.6:
	.long	0x00000000,0x40f00000
	.type	.L_2il0floatpacket.6,@object
	.size	.L_2il0floatpacket.6,8
	.align 8
.L_2il0floatpacket.7:
	.long	0x40000000,0x41df4add
	.type	.L_2il0floatpacket.7,@object
	.size	.L_2il0floatpacket.7,8
	.align 1
__$U1:
	.long	1852399981
	.byte	0
	.type	__$U1,@object
	.size	__$U1,5
	.align 1
__$U0:
	.long	1835362148
	.word	109
	.type	__$U0,@object
	.size	__$U0,6
	.section .rodata.str1.4, "aMS",@progbits,1
	.align 4
	.align 4
.L_2__STRING.4:
	.long	1920298867
	.long	1814062435
	.long	1952935525
	.long	622869096
	.word	2660
	.byte	0
	.type	.L_2__STRING.4,@object
	.size	.L_2__STRING.4,19
	.space 1, 0x00 	# pad
	.align 4
.L_2__STRING.6:
	.long	980181334
	.long	1718363424
	.word	10
	.type	.L_2__STRING.6,@object
	.size	.L_2__STRING.6,10
	.space 2, 0x00 	# pad
	.align 4
.L_2__STRING.7:
	.long	1296385860
	.long	622869069
	.long	1931503212
	.long	1852793701
	.long	539784036
	.long	543583269
	.long	1869366861
	.long	684912
	.type	.L_2__STRING.7,@object
	.size	.L_2__STRING.7,32
	.align 4
.L_2__STRING.8:
	.long	1294489410
	.long	695414594
	.long	1814372410
	.long	1411394662
	.long	677735785
	.long	622864755
	.long	744829742
	.long	825107744
	.long	673212012
	.long	2036543298
	.long	694512739
	.word	10
	.type	.L_2__STRING.8,@object
	.size	.L_2__STRING.8,46
	.space 2, 0x00 	# pad
	.align 4
.L_2__STRING.9:
	.long	1815162405
	.long	774185062
	.long	543583281
	.long	1815162405
	.long	774185062
	.long	543583281
	.long	1815162405
	.long	774185062
	.long	543583281
	.long	1815162405
	.long	774185062
	.long	174484529
	.byte	0
	.type	.L_2__STRING.9,@object
	.size	.L_2__STRING.9,49
	.space 3, 0x00 	# pad
	.align 4
.L_2__STRING.5:
	.long	6517363
	.type	.L_2__STRING.5,@object
	.size	.L_2__STRING.5,4
	.align 4
.L_2__STRING.1:
	.long	1852399981
	.word	25390
	.byte	0
	.type	.L_2__STRING.1,@object
	.size	.L_2__STRING.1,7
	.space 1, 0x00 	# pad
	.align 4
.L_2__STRING.3:
	.word	67
	.type	.L_2__STRING.3,@object
	.size	.L_2__STRING.3,2
	.space 2, 0x00 	# pad
	.align 4
.L_2__STRING.2:
	.word	66
	.type	.L_2__STRING.2,@object
	.size	.L_2__STRING.2,2
	.space 2, 0x00 	# pad
	.align 4
.L_2__STRING.0:
	.word	65
	.type	.L_2__STRING.0,@object
	.size	.L_2__STRING.0,2
	.data
	.section .note.GNU-stack, ""
# End
